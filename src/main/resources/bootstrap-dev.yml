#端口
server:
  tomcat:
    #编码方式
    uri-encoding: UTF-8
    #等待队列长度，当可分配的线程数全部用完之后，后续的请求将进入等待队列等待，等待队列满后则拒绝处理，默认100
    accept-count: 1000
    #最大并发数,默认200,默认配置下，触发的请求超过(最大工作线程数+等待队列长度),后拒绝处理
    max-threads: 1000
    #最大链接数,默认10000
    max-connections: 20000
spring:
  #国际化编码
  messages:
    encoding: UTF-8
    basename: i18n/messages,i18n/messages_common
  #日期格式化
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
  #redis config
  redis:
    open: false  # 是否开启redis缓存  true开启   false关闭
    #redis使用数据库
    database: 1
    #链接地址
    host: 127.0.0.1
    #端口
    port: 6379
    #密码,默认为空
    password: 123456
    # 连接超时时长（毫秒）
    timeout: 120s
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 1000
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
        # 连接池中的最大空闲连接
        max-idle: 10
        # 连接池中的最小空闲连接
        min-idle: 5
  #数据源 config
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      #数据库驱动
      driver-class-name: com.mysql.jdbc.Driver
#      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://127.0.0.1:3306/liuqiang?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
#      url: jdbc:mysql://127.0.0.1:3306/liuqiang?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2b8&nullCatalogMeansCurrent=true&allowMultiQueries=true

      # 链接数据库的用户名
      username: root
      # 链接数据库的用户密码
      password: root
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时（缺省值：0）
      initial-size: 10
      # 最大连接池数量（缺省值：8）
      max-active: 100
      # 最小链接池数量
      min-idle: 10
      # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
      max-wait: 60000
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。(缺省值：false)
      pool-prepared-statements: true
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: 20
      # 1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
      #Oracle需要打开注释
      #validation-query: SELECT 1 FROM DUAL
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-return: false
      # 物理连接初始化的时候执行的sql
      connectionInitSqls: select 1 from dual
      # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
      filters: stat, slf4j
      filter:
        # 监控统计
        stat:
          # 数据库类型
          db-type: mysql
          # 慢SQL
          log-slow-sql: true
          # 慢SQL执行时间ms
          slow-sql-millis: 2000
          #是否合并sql
          merge-sql: false
        wall:
          #防御sql注入的filter:wall
          enabled: true
          db-type: mysql
          config:
            delete-allow: true
            drop-table-allow: true
            multi-statement-allow: true
      ## StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
      #durid 监控访问路径： http://ip:${server.port}/${server.servlet.context-path}/druid/login.html
      stat-view-servlet:
        ## 是否启用WebStatFilter,默认是false关闭的
        enabled: true
        # 访问路径
        url-pattern: /druid/*
        # 禁止手动重置监控数据
        reset-enable: false
        # 设置监控页面的登陆名
        login-username: admin
        # 设置监控页面的登陆密码
        login-password: admin
      # WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
      web-stat-filter:
        # 是否启用WebStatFilter,默认是false关闭的
        enabled: true
        # 访问路径
        url-pattern: /*
        # 排除不必要的url
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
        # 监控最大session数，默认是1000
        session-stat-max-count: 1000
        # 是否启用session的统计功能
        session-stat-enable: true
        # 是否启用监控单个Url调用的sql列表
        profile-enable: true
        # 使druid当前session的用户是谁，session_user_key是你保存到session中的sessionName
        principalSessionName: session_user_key
        # 使druid只当当前的user是谁,cookie_user_key是你保存在cookie中的cookieName
        principalCookieName: cookie_user_key
  #mongodb config
  data:
    mongodb:
      #链接地址，同127.0.0.1
      host: 127.0.0.1
      #端口
      port: 27017
      #指定操作的数据库
      database: liuqiang
      #用户名
      #username: root
      #密码
      #password: root
  #rabbit config
  rabbitmq:
    #ip地址
    addresses: 127.0.0.1:5672
    #登录用户
    username: guest
    #登录密码
    password: guest
    virtual-host: /
    #链接超时时间
    connection-timeout: 10000
    # 开启消息确认机制,确认消息已发送到交换机(Exchange), publisher-confirm-type: correlated
    publisher-confirms: true
    # 开启消息确认机制
    publisher-returns: true
    template:
      mandatory: true
    # 监听配置
    listener:
      simple:
        # 客户端确认消息方式 ,默认是自动确认，这里改为手动确认
        acknowledge-mode: manual
        #是否自动启动监听事件
        auto-startup: true
        # 不重回队列
        default-requeue-rejected: false
        # 初始并发量
        concurrency: 5
        # 最大并发量
        max-concurrency: 20
        # 最多一次消费多少条数据 -限流
        prefetch: 1
        #是否开启重试机制
        retry:
          enabled: true
  #注册中心
  cloud:
    #    该项配置用于指定首选IP，当有多个网卡时，指定该IP地址后（支持正则），
    #    客户端在选择IP时就会选择符合preferredNetworks配置的IP地址进行注册
    #    inetutils:
    #      #忽略指定正则匹配的网卡的配置，我这里配置了VM虚拟机和Docker的
    #      ignoredInterfaces:
    #        - 'VMware.*'
    #        - 'Hyper-V.*'
    #      #指定默认IP，可以使IP段
    #      preferred-networks:
    #        - 192.168
    #      use-only-site-local-interfaces: true
    nacos:
      #注册中心，具体属性查看 NacosDiscoveryProperties
      discovery:
        #Nacos也可以配置自己的首选IP以及网卡选择,配置自己的首选网卡
        #networkInterface:
        #配置自己的首选IP，优先级最高
        #ip: 47.107.186.110
        ##默认情况下不用配置，会自动探测
        # port: 8848
        ##Nacos Server 启动监听的ip地址和端口,，集群配置时，多个IP地址用逗号分隔
        server-addr: 127.0.0.1:8848
        #server-addr: localhost:8848
        # #给当前的服务命名，默认值${spring.application.name:}
        service: ${spring.application.name}
        #分组，默认值DEFAULT_GROUP
        group: DEFAULT_GROUP
        #命名空间，默认值public
        #namespace: e835f88b-092f-48a7-a786-62979c25c814
        #prod环境
        namespace: adfeb13b-291a-4154-ac97-b8526dcd8ca5
        #test环境
        #namespace: 72e282dd-b09a-403e-a6a0-d3eda245426b
        #release环境
        #namespace: 50df6a09-0fd5-44ed-9b3b-1f865e6d12b2
        #默认使用nacos注册中心，如果不想使用 Nacos 作为您的服务注册与发现，可以将值设置为 false
        enabled: true
      ## 当要上阿里云时，阿里云上面的一个云账号名
      #access-key:
      # # 当要上阿里云时，阿里云上面的一个云账号密码
      #secret-key:
      # #使用Map格式配置，用户可以根据自己的需要自定义一些和服务相关的元数据信息
      #metadata:
      ## 日志文件名
      #log-name:
      ## 地域的某个服务的入口域名，通过此域名可以动态地拿到服务端地址
      #endpoint:
      #配置中心服务 spring.cloud.nacos.config.server-addr=127.0.0.1:8848
      #需要配置 spring.application.name ，是因为它是构成 Nacos 配置管理 dataId字段的一部分。
      config:
        # 相同配置，本地优先
        #override-none: true
        #allow-override: true
        #override-system-properties: false
        #是否自动刷新属性，默认是true,可以通过设置 false 来完全关闭
        enabled: true
        #注册服务地址，ip地址:端口，集群配置时，多个IP地址用逗号分隔
        server-addr: ${spring.cloud.nacos.discovery.server-addr}
        #prefix 默认为 spring.application.name 的值
        prefix: ${spring.application.name}
        #file-exetension 为配置内容的数据格式只支持 properties 和 yaml 类型
        file-extension: yaml
        #自动刷新配置
        refresh-enabled: true
        #分组，默认值DEFAULT_GROUP
        group: ${spring.cloud.nacos.discovery.group}
        #命名空间，默认值public
        namespace: ${spring.cloud.nacos.discovery.namespace}
        #文件扩展名既可支持 properties，也可以支持 yaml/yml。
        #配置文件信息查看： http://localhost:8848/nacos/v1/cs/configs?dataId=192.168.0.87-beacon-server-dev.yaml&group=DEFAULT_GROUP
        #ext-config[1]:
        #data-id: ${spring.application.name}-${spring.profiles.active}.yaml
        #group: DEFAULT_GROUP
        #refresh: true
        extension-configs[0]:
          data-id: 192.168.0.87-common-${spring.profiles.active}.yaml
          group: ${spring.cloud.nacos.discovery.group}
          #          是否自动刷新，默认不刷新
          refresh: ${spring.cloud.nacos.config.refresh-enabled}
        extension-configs[1]:
          data-id: ${spring.application.name}-${spring.profiles.active}.yaml
          group: ${spring.cloud.nacos.discovery.group}
          refresh: ${spring.cloud.nacos.config.refresh-enabled}
#actor监控,
#注册中心访问地址：http://localhost:8085/beacon/actuator/nacos-discovery
#配置中心访问地址：http://localhost:8085/beacon/actuator/nacos-config
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS
#feign config
feign:
  #禁用feign的hystrix
  hystrix:
    enabled: false
  client:
    config:
      default:
        connectTimeout: 60000
        readTimeout: 60000
#熔断机制
hystrix:
  command:
    default:
      execution:
        #把超时发生异常属性关闭
        timeout:
          enabled: false
        #修改超时时间
        isolation:
          thread:
            #超时链接,缺省为1000ms
            timeoutInMilliseconds: 60000
#负载均衡
ribbon:
  ReadTimeout: 300000
  ConnectTimeout: 300000

#mybatis config
mybatis-plus:
  #  mybatis 读取配置文件
  mapper-locations: classpath:/mapper/**/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.goo.*.entity;con.goo.*.dto
  global-config:
    #数据库相关配置
    db-config:
      #主键类型  AUTO:"数据库ID自增", INPUT:"用户输入ID", ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
      id-type: ID_WORKER
      #字段策略 IGNORED:"忽略判断",NOT_NULL:"非 NULL 判断"),NOT_EMPTY:"非空判断"
      field-strategy: NOT_NULL
      #驼峰下划线转换
      column-underline: true
    banner: false
  #原生配置
  configuration:
    map-underscore-to-camel-case: true
    #    是否开启缓存
    cache-enabled: false
    # 如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段
    call-setters-on-nulls: true
    jdbc-type-for-null: 'null'

##多数据源的配置，需要引用192.168.0.87-commons-dynamic-datasource
#dynamic:
#  datasource:
#    slave1:
#      driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver
#      url: jdbc:sqlserver://localhost:1433;DatabaseName=192.168.0.87_cloud
#      username: sa
#      password: 123456
#    slave2:
#      driver-class-name: org.postgresql.Driver
#      url: jdbc:postgresql://localhost:5432/192.168.0.87_cloud
#      username: postgres
#      password: 123456

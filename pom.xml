<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.7.RELEASE</version>
    </parent>
    <groupId>com.goo</groupId>
    <artifactId>springcloud-nacos</artifactId>
    <version>1.0.2-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>springcloud-nacos</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <spring.boot.version>2.0.7</spring.boot.version>
        <spring.boot.admin.version>2.0.3</spring.boot.admin.version>
        <spring.cloud.version>Finchley.SR2</spring.cloud.version>
        <spring.cloud.alibaba.version>2.0.3.RELEASE</spring.cloud.alibaba.version>

        <!--自定义组件-->
        <daison-commons.version>1.0.2-SNAPSHOT</daison-commons.version>
        <daison-business.version>1.0.2-SNAPSHOT</daison-business.version>

        <swagger.version>2.10.0</swagger.version>
        <docker.plugin.version>1.1.1</docker.plugin.version>
        <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
        <junit.version>4.12</junit.version>
        <lombok.version>1.18.12</lombok.version>
        <dom4j.version>1.6.1</dom4j.version>
        <commons-codec.version>1.11</commons-codec.version>
        <javamelody.version>1.72.0</javamelody.version>
        <itext.version>2.1.7</itext.version>

        <sonar.version>3.6.0.1398</sonar.version>
        <jacoco.version>0.8.4</jacoco.version>
        <sonar.exclusions>**/com/test/*,**/com/test1/*</sonar.exclusions>

        <!--wagon plugin 配置-->
        <!--上传服务器文件目录-->
        <service-path>/home/daison/admin</service-path>
        <shell-name>${service-path}/script/thirdplatform-server.sh</shell-name>
        <!--上传服务器jar包-->
        <pack-name>${project.build.finalName}.jar</pack-name>
        <!--登陆服务器ip地址，端口-->
        <remote-addr>192.168.0.87:22</remote-addr>
        <!--<remote-addr>8.135.19.154:22</remote-addr>-->
        <!--登陆服务器用户账号、密码-->
        <remote-username>admin</remote-username>
        <remote-passwd>123456</remote-passwd>

        <!-- docker 打包镜像上传配置本地测试环境-->
        <docker-ip>192.168.0.87</docker-ip>
        <docker-url>https://${docker-ip}:2375</docker-url>
        <registry-url>${docker-ip}:8075</registry-url>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <!--spring监控-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>
        <!--alibaba 注册中心-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
            <version>${spring.cloud.alibaba.version}</version>
        </dependency>
        <!--alibaba 配置中心-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
            <version>${spring.cloud.alibaba.version}</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba.nacos</groupId>
            <artifactId>nacos-client</artifactId>
        </dependency>
        <!--远程调用负载-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
            <!--  <version>${spring-cloud-netflix.version}</version>-->
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        <!--熔断-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
        </dependency>
        <!--admin 监控-->
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
            <version>${spring.boot.admin.version}</version>
        </dependency>
        <!--接口文档-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${swagger.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${swagger.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/dom4j/dom4j -->
        <dependency>
            <groupId>dom4j</groupId>
            <artifactId>dom4j</artifactId>
            <version>${dom4j.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${commons-codec.version}</version>
        </dependency>
        <!--elk日志记录-->
        <dependency>
            <groupId>com.internetitem</groupId>
            <artifactId>logback-elasticsearch-appender</artifactId>
            <version>1.6</version>
        </dependency>
        <!-- javamelody性能监控  -->
        <dependency>
            <groupId>net.bull.javamelody</groupId>
            <artifactId>javamelody-spring-boot-starter</artifactId>
            <version>${javamelody.version}</version>
        </dependency>
        <!-- itext, option to add PDF export -->
        <dependency>
            <groupId>com.lowagie</groupId>
            <artifactId>itext</artifactId>
            <version>${itext.version}</version>
            <exclusions>
                <exclusion>
                    <artifactId>bcmail-jdk14</artifactId>
                    <groupId>bouncycastle</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>bcprov-jdk14</artifactId>
                    <groupId>bouncycastle</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>bctsp-jdk14</artifactId>
                    <groupId>bouncycastle</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- prometheus+Grafana 普罗米修斯监控-->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
            <!-- <version>1.1.3</version>-->
        </dependency>
<!--        <dependency>-->
<!--            <groupId>com.goo</groupId>-->
<!--            <artifactId>daison-commons-tools</artifactId>-->
<!--            <version>${daison-commons.version}</version>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>com.goo</groupId>-->
<!--            <artifactId>daison-commons-mybatis</artifactId>-->
<!--            <version>${daison-commons.version}</version>-->
<!--        </dependency>-->

        <dependency>
            <groupId>com.goo</groupId>
            <artifactId>daison-commons-tools</artifactId>
            <scope>system</scope>
            <version>1.0.2-SNAPSHOT</version>
            <systemPath>${basedir}/lib/daison-commons-tools-1.0.2-SNAPSHOT.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>com.goo</groupId>
            <artifactId>daison-commons-mybatis</artifactId>
            <scope>system</scope>
            <version>1.0.2-SNAPSHOT</version>
            <systemPath>${project.basedir}/lib/daison-commons-mybatis-1.0.2-SNAPSHOT.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.3.1</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.17</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.38</version>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--ali注册中心-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring.cloud.alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <finalName>${project.artifactId}-${project.version}</finalName>
        <extensions>
            <extension>
                <!--配置wagon-ssh连接服务器 ssh 依赖包-->
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-ssh</artifactId>
                <version>2.8</version>
            </extension>
        </extensions>
        <!--maven打包插件-->
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <fork>true</fork>
                </configuration>
            </plugin>
            <!-- 跳过单元测试 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
            <!--上传插件-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>wagon-maven-plugin</artifactId>
                <version>1.0</version>
                <configuration>
                    <!-- serverId即在settings.xml中配置的service的id -->
                    <!-- <serverId>linux-server-dev</serverId>-->
                    <!-- 需要部署的文件 -->
                    <fromFile>target/${pack-name}</fromFile>
                    <!-- 部署目录  用户：密码@ip+部署地址：端口 -->
                    <url><![CDATA[ scp://${remote-username}:${remote-passwd}@${remote-addr}${service-path} ]]></url>
                    <!--shell 执行脚本 -->
                    <commands>
                        <!-- 停止服务-->
                        <command><![CDATA[ sh ${shell-name} stop ]]></command>
                        <!-- 启动服务 -->
                        <command>
                            <![CDATA[ source /etc/profile; sh ${shell-name} start ]]></command>
                    </commands>
                    <!-- 运行命令 mvn clean package wagon:upload-single wagon:sshexec-->
                    <!-- 显示运行命令的输出结果 -->
                    <displayCommandOutputs>true</displayCommandOutputs>
                </configuration>
            </plugin>
            <!--docker 打包插件-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.2</version>
                <!-- <executions>
                     <execution>
                         <id>build-image</id>
                         <phase>package</phase>
                         <goals>
                             <goal>build</goal>
                         </goals>
                     </execution>
                 </executions>-->
                <configuration>
                    <!--打包docker镜像的docker服务器-->
                    <dockerHost>${docker-url}</dockerHost>
                    <!--镜像名，这里用工程名 -->
                    <imageName>${registry-url}/${project.artifactId}:${project.version}</imageName>
                    <!--nexus3 hosted 仓库地址-->
                    <registryUrl>${registry-url}</registryUrl>
                    <!-- ca认证正书-->
                    <!--<dockerCertPath>${project.basedir}\src\main\docker</dockerCertPath>-->
                    <dockerCertPath>D:\cert\docker-144</dockerCertPath>
                    <!--TAG,这里用工程版本号-->
                    <imageTags>
                        <!-- 指定镜像标签,可以排至多个标签 -->
                        <imageTag>${project.version}</imageTag>
                    </imageTags>
                    <!--是否强制覆盖已有镜像-->
                    <forceTags>true</forceTags>
                    <!--方式一：1、指定Dockerfile文件所在目录，通过文件执行打包上传nexus私服-->
                    <dockerDirectory>src/main/docker</dockerDirectory>
                    <!-- 方式二：通过配置命令打包 -->
                    <!--<baseImage>java</baseImage>
                    <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>-->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                    <!-- 运行命令 mvn clean package docker:build 打包并生成docker镜像 -->
                    <!-- serverId, 与maven配置文件settings.xml中配置的server.id一致，用于推送镜像
                    执行命令： mvn clean compile package docker:build -DpushImage
                    mvn clean package docker:build -Pprod -DskipTests -DpushImageTag
                    -->
                    <serverId>docker-proxy</serverId>
                </configuration>
            </plugin>
            <!-- sonar 代码检查插件-->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.4</version>
                <executions>
                    <execution>
                        <id>jacoco-ut</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>jacoco-it</id>
                        <goals>
                            <goal>prepare-agent-integration</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>jacoco-site</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>3.6.0.1398</version>
            </plugin>
        </plugins>

        <!-- 资源目录 -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
                <!-- 资源根目录排除各环境的配置，防止在生成目录中多余其它目录 -->
                <excludes>
                    <exclude>bootstrap-dev.yml</exclude>
                    <exclude>bootstrap-prod.yml</exclude>
                    <exclude>bootstrap-test.yml</exclude>
                </excludes>
                <filtering>true</filtering>
            </resource>
            <!--激活指定文件-->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>bootstrap-dev.yml</include>
                </includes>
            </resource>
            <!--打包java目录-->
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
                <filtering>true</filtering>
            </resource>
            <!--打包docker目录-->
            <resource>
                <directory>src/main/docker</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <filtering>true</filtering>
            </resource>

            <resource>
                <directory>lib</directory>
                <targetPath>/BOOT-INF/lib/</targetPath>
                <includes>
                    <include>**/*.jar</include>
                </includes>
            </resource>
        </resources>
    </build>

    <!--分环境打包，命令行指定激活方式优先spring.profiles.active=dev-->
    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <!--默认激活dev环境-->
                <profileActive>dev</profileActive>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>test</id>
            <properties>
                <profileActive>test</profileActive>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <profileActive>prod</profileActive>
            </properties>
        </profile>
    </profiles>

</project>